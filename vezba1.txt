//Ovaa programa sortira elementi vo odnos na pivot element
//imame funkcija partition koja go zema posledniot element kako pivot element i potoa
//site pomali elementi vo odnos na pivotot gi podreduva levo,a pogolemite desno
//Potoa imame funkcija partition_r koja ja povikuva funkcijata partition i najmaliot element go podreduva prv
//Vo glavnata funkcija se ispisuvaat elementite po red,zapocnuvajkji od najmaliot do najgolemiot

#include <cstdlib>
#include <iostream>
using namespace std;
 
int partition(int arr[], int low, int high)
{
    int pivot = arr[low];
    int i = low - 1, j = high + 1;
  
    while (true) {
  
      
        do {
            i++;
        } while (arr[i] < pivot);
  
       
        do {
            j--;
        } while (arr[j] > pivot);
  
       
        if (i >= j)
            return j;
  
        swap(arr[i], arr[j]);
    }
}
  

int partition_r(int arr[], int low, int high)
{
    
    srand(time(NULL));
    int random = low + rand() % (high - low);
  
    swap(arr[random], arr[low]);
  
    return partition(arr, low, high);
}
  
void quickSort(int arr[], int low, int high)
{
    if (low < high) {
        
        int pi = partition_r(arr, low, high);
        quickSort(arr, low, pi);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
  
int main()
{
    int arr[] = {'A','n','g','e','l','a','P','e','t','r','o','v','a','I','N','K','I',9,8,9};
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}